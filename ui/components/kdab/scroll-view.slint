import { Palette, BorderSpec, LayoutSpec } from "./styling.slint";

export component ScrollBar {
    out property <bool> has-hover: touch-area.has-hover;
    in-out property <bool> horizontal;
    in-out property <length> maximum;
    in-out property <length> page-size;
    in-out property <length> value;

    property <length> track-size: root.horizontal ? root.width : root.height;
    property <length> step-size: 10px;

    visible: self.maximum > 0;

    Rectangle {
        border-radius: thumb.border-radius;
        border-width: BorderSpec.default-width;
        border-color: Palette.border;
        background: Palette.background;
        opacity: 0.5;
    }

    thumb := Rectangle {
        width: !root.horizontal ? parent.width : root.maximum <= 0phx ? 0phx : max(32px, root.track-size * root.page-size / (root.maximum + root.page-size));
        height: root.horizontal ? parent.height : root.maximum <= 0phx ? 0phx : max(32px, root.track-size * (root.page-size / (root.maximum + root.page-size)));
        x: !root.horizontal ? (parent.width - self.width) / 2 :  (root.track-size - thumb.width) * (-root.value / root.maximum);
        y: root.horizontal ? (parent.height - self.height) / 2 :  (root.track-size - thumb.height) * (-root.value / root.maximum);
        border-radius: (root.horizontal ? self.height : self.width) / 2;
        border-width: BorderSpec.default-width;
        border-color: Palette.border;
        background: Palette.background;
    }

    touch-area := TouchArea {
        property <length> pressed-value;

        width: parent.width;
        height: parent.height;

        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                self.pressed-value = -root.value;
            }
        }

        moved => {
            if (self.enabled && self.pressed) {
                root.value = -max(0px, min(root.maximum, self.pressed-value + (
                    root.horizontal ? (touch-area.mouse-x - touch-area.pressed-x) * (root.maximum / (root.track-size - thumb.width))
                               : (touch-area.mouse-y - touch-area.pressed-y) * (root.maximum / (root.track-size - thumb.height))
                )));
            }
        }

        scroll-event(event) => {
            if (root.horizontal && event.delta-x != 0) {
                root.value = max(-root.maximum, min(0px, root.value + event.delta-x));
                return accept;
            } else if (!root.horizontal && event.delta-y != 0) {
                root.value = max(-root.maximum, min(0px, root.value + event.delta-y));
                return accept;
            }
            reject
        }
    }
    
    states [
         pressed when touch-area.pressed: {
            thumb.background: Palette.selected-background;
        }
    ]
}

export component ScrollView {
    out property <length> visible-width <=> flickable.width;
    out property <length> visible-height <=> flickable.height;
    in-out property <length> viewport-width <=> flickable.viewport-width;
    in-out property <length> viewport-height <=> flickable.viewport-height;
    in-out property <length> viewport-x <=> flickable.viewport-x;
    in-out property <length> viewport-y <=> flickable.viewport-y;
     // FIXME: remove. This property is currently set by the ListView and is used by the native style to draw the scrollbar differently when it has focus
    in-out property <bool> has-focus;
    in property <length> bar-padding;

    callback scrolled <=> flickable.flicked;

    min-height: 50px;
    min-width: 50px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    flickable := Flickable {
        interactive: false;
        viewport-y <=> vertical-bar.value;
        viewport-x <=> horizontal-bar.value;
        width: 100%;
        height: 100%;

        @children
    }

    vertical-bar := ScrollBar {
        x: parent.width  - self.width;
        y: root.bar-padding;
        width: 10px;
        height: (horizontal-bar.visible ? parent.height - horizontal-bar.height : parent.height) - 2 * root.bar-padding;
        horizontal: false;
        maximum:  flickable.viewport-height - flickable.height;
        page-size:  flickable.height;
    }

    horizontal-bar := ScrollBar {
        width: (vertical-bar.visible ? parent.width - vertical-bar.width : parent.width) - 2 * root.bar-padding;
        height: 10px;
        y: parent.height - self.height;
        x: root.bar-padding;
        horizontal: true;
        maximum:  flickable.viewport-width - flickable.width;
        page-size:  flickable.width;
    }
}

export component NoClipScrollView inherits ScrollView {
    bar-padding: LayoutSpec.small-padding;

    VerticalLayout {
        alignment: start;
        padding-top: LayoutSpec.small-padding;
        padding-bottom: LayoutSpec.small-padding;

        @children
    }   
}

export component ListView inherits ScrollView {
    @children
}
